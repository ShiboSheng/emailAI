AWSTemplateFormatVersion: '2010-09-09'
Description: Template for Demo
Parameters:
  EmailBucketName:
    Type: String
    Default: cs6998-emails-cf
  EndpointName:
    Type: String
    Default: sms-spam-classifier-mxnet-2022-04-01-00-59-17-558
  ReceiptRuleSetName:
    Type: String
    Default: cs6998-email-cf
  ReceiptRuleName:
    Type: String
    Default: email-to-S3-cf
  ParseEmailLambdaName:
    Type: String
    Default: parse-email-cf
  CodeBucketName:
    Type: String
    Default: hw3-cf-code-bucket

Resources:
  ParseEmailRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: parse-email-role-cf
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: parse-email-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: "*"
                Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
              - Resource: "*"
                Effect: Allow
                Action:
                  - ses:SendEmail
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3-object-lambda:Get*
                  - s3-object-lambda:List*

  ParseEmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub ${CodeBucketName}
        S3Key: code.zip
      Description: created by cloudformation
      MemorySize: 128
      Environment:
        Variables:
          ENDPOINT_NAME: !Sub ${EndpointName}
      Handler: lambda_function.lambda_handler
      Role: !GetAtt ParseEmailRole.Arn
      Timeout: 30
      Runtime: python3.8
      FunctionName: !Ref ParseEmailLambdaName

  TriggerPermission:
    Type: AWS::Lambda::Permission
    DependsOn: ParseEmailLambda
    Properties:
      FunctionName: !Ref ParseEmailLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${EmailBucketName}

  EmailBucket:
    Type: AWS::S3::Bucket
    DependsOn: TriggerPermission
    Properties:
      BucketName: !Ref EmailBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt ParseEmailLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: emails/

  EmailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicReadGetObject
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSESPuts
            Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${EmailBucketName}/*
            Condition:
              StringEquals:
                aws:Referer: !Ref AWS::AccountId
      Bucket: !Ref EmailBucket

  EmailRuleSet:
    Type: AWS::SES::ReceiptRuleSet
    Properties:
      RuleSetName: !Sub ${ReceiptRuleSetName}

  EmailRule:
    Type: AWS::SES::ReceiptRule
    DependsOn: EmailBucketPolicy
    Properties:
      RuleSetName: !Sub ${ReceiptRuleSetName}
      Rule:
        Name: !Sub ${ReceiptRuleName}
        Enabled: true
        Actions:
          - S3Action:
              BucketName: !Sub ${EmailBucketName}
              ObjectKeyPrefix: emails/
